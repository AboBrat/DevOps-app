@Library('my-sherd-lib')_

pipeline {
    agent any
    tools {
    maven 'mvn'
}
parameters{

    choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/delete')
    string(name: 'ImageName',description: 'Name of the docker build', defaultValue: 'javapp')
    string(name: 'ImageTag',description: 'Tag of the docker build', defaultValue: 'v1')
    string(name: 'DockerHubUser',description: 'Name of the application', defaultValue: 'albatros123')


}


    stages {
        stage('Checkout'){
        when { expression { params.action == 'create'} }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/AboBrat/DevOps-app.git"
            )
            }
        }

        stage('Unit Test maven'){
        when { expression { params.action == 'create'}}
            steps{
            script{
                mvnTest()
                }
            }
        }

        stage('Integraton Test maven'){
        when { expression { params.action == 'create'}}
            steps{
            script{
                mvnIntegrationTest()
                }
            }
        }
    //    stage('Static code analysis: Sonarqube'){
//when { expression {  params.action == 'create' } }
 //           steps{
///               script{
                   
  //                 def SonarQubecredentialsId = 'sonar-api'
  //                 statiCodeAnalysis(SonarQubecredentialsId)
   //            }
   //         }
   //     }
    //    stage('Quality Gate Status Check : Sonarqube'){
    //     when { expression {  params.action == 'create' } }
     //       steps{
     //          script{
                   
       //            def SonarQubecredentialsId = 'sonar-api'
       //            QualityGateStatus(SonarQubecredentialsId)
       //        }
        //    }
      //  }
        stage('Maven build'){
        when { expression { params.action == 'create'}}
            steps{
            script{
                mvnBuild()
                }
            }
        }
        stage('Docker Image Build'){
        when { expression { params.action == 'create'}}
            steps{
            script{
                DockerBuild("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
                }
            }
        }
        stage('Docker Image Scan'){
        when { expression { params.action == 'create'}}
            steps{
            script{
                dockerImageScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
                }
            }
        }
        stage('Docker Image Push : DockerHUb'){
        when { expression { params.action == 'create'}}
            steps{
            script{
                dockerImagePush("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
                }
            }
        }
    }
}



